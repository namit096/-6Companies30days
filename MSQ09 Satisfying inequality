class Solution {
public:

    long long merge(vector<int>&nums , int low , int mid,int high,int diff){
        int i=low;
        int j=mid+1;
        long long count=0;

        while(i<=mid and j<=high){
            if(nums[i] <= nums[j] + diff){
                count += (high-j+1);
                i++;
            }
            else{
                j++;
            }
        }
        
        vector < int > t;
        int left = low, right = mid + 1;

  while (left <= mid && right <= high) {
    if (nums[left] <= nums[right]) {
      t.push_back(nums[left++]);
    } else {
      t.push_back(nums[right++]);
    }
  }

  while (left <= mid) {
    t.push_back(nums[left++]);
  }
  while (right <= high) {
    t.push_back(nums[right++]);
  }

  for (int i = low; i <= high; i++) {
    nums[i] = t[i - low];
  }
        return count;
    }
    
    long long mergesort(vector<int>&nums , int low , int high , int diff){
        if(low>=high) return 0;
            int mid=(low+high)/2;
            //int inv=mergersort(nums,low,high);
            long long inv=mergesort(nums,low,mid,diff);
            inv+=mergesort(nums,mid+1,high,diff);
            inv+=merge(nums,low , mid , high , diff);
        return inv;
    }

    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        int res = 0;
        vector<int> v;
        for (int i = 0; i < nums1.size(); ++i) {
            v.push_back(nums1[i] - nums2[i]);
        }

        long long  ans=mergesort(v,0,v.size()-1,diff);
        return ans;

    }
};
